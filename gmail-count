#!/usr/bin/python
###############################################################################
#
# file:     gmail-count
#
# Purpose:  generates a string value representing the Gmail unread email count.
#
# Usage:    pipe the i3status with this script (see i3status manpage)
#           or use conky.
#
###############################################################################
#
# Copyright 2013 Bruno Braga
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
###############################################################################
#
# Soft Dependencies:
#               * python-gnomekeyring
#               (if you do not want to use it, just remove the keyring import
#               and place the plain password - read below)
#
#               * python-lxml
#               (if not available, will try to parse the hard way)
#
###############################################################################

__NAME__ = 'gmail-count'
"""
Defines the name of this script. Used as the service name of keyring store,
if applicable.
"""

__VERSION__ = 0.1
"""
Defines the version of this script.
"""

import urllib2
import sys
import optparse
import feedparser

# #############################
# CONFIGURABLE SETTINGS: BEGIN
# #############################

# these are the labels you want to check
# should always atleast contain ''
labels = ['' 'usi']

#
# First time? Add password to keyring
# keyring.set_password('Gmail', 'username@gmail.com', '{password}')
#
# Don't want to use keyring (or don't have it)?
# Just remove the keyring import and replace this password line for your
# raw password (do not recommend doing this, but if you choose to do so,
# remember to change the file permissions to 700 to ensure you alone can
# access it).
#
password = ''

# #############################
# CONFIGURABLE SETTINGS: END
# #############################

verbose = False
username = ''
useCache = True

uri = 'https://mail.google.com'
url = 'https://mail.google.com/mail/feed/atom/'


def setKeyringPassword():
    """
    Prompts and stores a user password in Gnome Keyring.
    """
    import getpass
    kPassword = getpass.getpass(
        prompt='Type in password for user [%s]: ' %
        username)
    if not kPassword or len(kPassword) == 0:
        print 'Must set a valid password'
        sys.exit(1)
    else:
        try:
            import keyring
            keyring.set_password(__NAME__, username, kPassword)
            print "Done."
            sys.exit(0)
        except Exception, e:
            print('Python keyring module not found. See --help for details.', e)
            sys.exit(1)


def parseArgs():

    # override the default parser to allow new lines
    class Parser(optparse.OptionParser):

        def format_epilog(self, formatter):
            return self.epilog

    global username, password, verbose
    parser = Parser(usage="usage: %prog [options]",
                    description="A simple Gmail unread count script for \
i3status or conky bars.",
                    version="%%prog %s" % __VERSION__,
                    epilog="""
Notes:

This script will attempt to access the account's password in the following manner:
  - if --password is given, will use it
  - if not, will see if it has been hard-coded within the script (some people
    may prefer that)
  - lastly, if none of the above satisfies, it will retrieve it from keyring,
    if available. To add your password to the keyring, use option --add-keyring

""")
    parser.add_option("-u", "--username", dest="username", action="store",
                      help="The Gmail username (without the gmail.com). \
If Google Apps account, need to use the complete email address.")

    parser.add_option("-p", "--password", dest="password", action="store",
                      help="The plain text password associated with the \
username. If not given, this script will try to retrieve it from keyring. \
Alternatively, you can set the password by hand in this script source, if you \
don't want to send it as option. See source code for details.")

    parser.add_option("-v", "--verbose", dest="verbose", default=False,
                      action="store_true",
                      help="Used for troubleshooting problems (do not use this \
with output bars, which are usually expecting very few chars).")

    parser.add_option("-a", "--add-keyring", dest="add", default=False,
                      action="store_true",
                      help="Prompts for the password to store it in Gnome \
Keyring. Useful if it is the first time using this script.")

    (options, args) = parser.parse_args()
    verbose = options.verbose
    username = options.username

    # validate username
    if not username or len(username) == 0:
        print("The --username option is required!")
        sys.exit(1)
    else:
        username += '@gmail.com'

    if options.add:
        setKeyringPassword()

    # validate password
    if not password or len(password) == 0:
        # no passwords stored locally, try to get from options
        password = options.password
        if not password:
            # still nothing, try from keyring
            try:
                import keyring
                password = keyring.get_password(__NAME__, username)
                if not password:
                    print("""Password not available (not in keyring).
Try to either:
    a) use option --password;
    b) add your password to keyring (see --help for details); or
    c) hard-code your password in this script (see password variable).
""")
                    sys.exit(1)
            except Exception, e:
                print(
                    "Python keyring module not found. See --help for details.",
                    e)
                sys.exit(1)


def auth(username, password):
    if verbose:
        print('Attempting to log into Google.')

    try:
        passman = urllib2.HTTPPasswordMgrWithDefaultRealm()
        passman.add_password(realm='mail.google.com',
                             uri=uri,
                             user=username,
                             passwd=password)
        handler = urllib2.HTTPBasicAuthHandler(passman)
    except Exception, e:
        print("Authorization failure.", e)
        sys.exit(1)

    if verbose:
        print('Succesfully logged into gmail.')

    return handler


def get_feed(handler, url):
    if verbose:
        print("Attempting to open feed.")

    opener = urllib2.build_opener(handler)
    urllib2.install_opener(opener)

    try:
        feed = urllib2.urlopen(url)
    except urllib2.HTTPError, e:
        print("The server couldn't fulfill your request.", e.code)
        sys.exit(2)
    except urllib2.URLError, e:
        print("No feed from server.", e.reason)
        sys.exit(3)
    except urllib2.DownloadError, e:
        print("Download error.", e)
        sys.exit(4)
    except Exception, e:
        print("An unexpected error has occurred.", e)
        sys.exit(5)

    if verbose:
        print("Feed succesfully opened.")

    return feed.read()


def main():
    num_emails = 0
    """
    Executes the main code of this script
    """

    parseArgs()

    # validate settings
    if not username or not password:
        print("A valid username and a password must be provided.")
        sys.exit(1)

    handler = auth(username, password)
    for label in labels:
        feed = get_feed(handler, url + label)

        atom = feedparser.parse(feed)

        num_emails += len(atom.entries)

    print num_emails

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print  # just to avoid password input interruption.
        sys.exit(0)
